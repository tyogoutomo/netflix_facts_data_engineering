<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20233.23.1017.0948                               -->
<workbook original-version='18.1' source-build='2023.3.0 (20233.23.1017.0948)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <_.fcp.AccessibleZoneTabOrder.true...AccessibleZoneTabOrder />
    <_.fcp.AnimationOnByDefault.true...AnimationOnByDefault />
    <AutoCreateAndUpdateDSDPhoneLayouts />
    <DashboardMttwImageObject />
    <IntuitiveSorting />
    <IntuitiveSorting_SP2 />
    <MapboxVectorStylesAndLayers />
    <_.fcp.MarkAnimation.true...MarkAnimation />
    <_.fcp.ObjectModelEncapsulateLegacy.true...ObjectModelEncapsulateLegacy />
    <_.fcp.ObjectModelTableType.true...ObjectModelTableType />
    <_.fcp.SchemaViewerObjectModel.true...SchemaViewerObjectModel />
    <SetMembershipControl />
    <SheetIdentifierTracking />
    <SortTagCleanup />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <_.fcp.AnimationOnByDefault.false...style>
    <_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule element='animation'>
      <_.fcp.AnimationOnByDefault.false...format attr='animation-on' value='ao-on' />
    </_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule>
  </_.fcp.AnimationOnByDefault.false...style>
  <datasources>
    <datasource hasconnection='false' inline='true' name='Parameters' version='18.1'>
      <aliases enabled='yes' />
      <column caption='Number of SDs' datatype='real' name='[Parameter 1]' param-domain-type='range' role='measure' type='quantitative' value='1.'>
        <calculation class='tableau' formula='1.' />
        <range granularity='1.0' max='3.0' />
      </column>
    </datasource>
    <datasource caption='ACT_SSIS_1 (2)' inline='true' name='federated.1yfi8av03mkdhj18afrsj1ulrtvh' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='(localdb)\Local' name='sqlserver.1iwvm3i1xpmxps156kqx30gd33l3'>
            <connection IsolationLevel='ReadUncommitted' authentication='sspi' class='sqlserver' dbname='ACT_SSIS_1' odbc-native-protocol='yes' one-time-sql='' server='(localdb)\Local' />
          </named-connection>
        </named-connections>
      </connection>
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States Minor Outlying Islands&quot;' />
      </semantic-values>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph />
    </datasource>
    <datasource caption='ACT_SSIS_1' inline='true' name='federated.0x4gw5i1utavke1fs9znw1b3k38v' version='18.1'>
      <connection class='federated' tableau-ri='true'>
        <named-connections>
          <named-connection caption='(localdb)\Local' name='sqlserver.0nhfhg70bz0awt1b3jiso1jwrp79'>
            <connection IsolationLevel='ReadUncommitted' authentication='sspi' class='sqlserver' dbname='ACT_SSIS_1' odbc-native-protocol='yes' one-time-sql='' server='(localdb)\Local' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='sqlserver.0nhfhg70bz0awt1b3jiso1jwrp79' name='Netflix_Join' table='[dbo].[Netflix_Join]' type='table' />
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation connection='sqlserver.0nhfhg70bz0awt1b3jiso1jwrp79' name='Netflix_Join' table='[dbo].[Netflix_Join]' type='table' />
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>duration_minutes</remote-name>
            <remote-type>5</remote-type>
            <local-name>[duration_minutes]</local-name>
            <parent-name>[Netflix_Join]</parent-name>
            <remote-alias>duration_minutes</remote-alias>
            <ordinal>1</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Netflix_Join_C163A833D5B64AA1A265CEB45B562CD5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>duration_seasons</remote-name>
            <remote-type>5</remote-type>
            <local-name>[duration_seasons]</local-name>
            <parent-name>[Netflix_Join]</parent-name>
            <remote-alias>duration_seasons</remote-alias>
            <ordinal>2</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Netflix_Join_C163A833D5B64AA1A265CEB45B562CD5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>type</remote-name>
            <remote-type>130</remote-type>
            <local-name>[type]</local-name>
            <parent-name>[Netflix_Join]</parent-name>
            <remote-alias>type</remote-alias>
            <ordinal>3</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>true</contains-null>
            <padded-semantics>true</padded-semantics>
            <collation flag='2147483649' name='LEN_RUS_S2_VWIN' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Netflix_Join_C163A833D5B64AA1A265CEB45B562CD5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>title</remote-name>
            <remote-type>130</remote-type>
            <local-name>[title]</local-name>
            <parent-name>[Netflix_Join]</parent-name>
            <remote-alias>title</remote-alias>
            <ordinal>4</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>true</contains-null>
            <padded-semantics>true</padded-semantics>
            <collation flag='2147483649' name='LEN_RUS_S2_VWIN' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Netflix_Join_C163A833D5B64AA1A265CEB45B562CD5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>date_added</remote-name>
            <remote-type>7</remote-type>
            <local-name>[date_added]</local-name>
            <parent-name>[Netflix_Join]</parent-name>
            <remote-alias>date_added</remote-alias>
            <ordinal>5</ordinal>
            <local-type>datetime</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_TYPE_TIMESTAMP&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_TYPE_TIMESTAMP&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Netflix_Join_C163A833D5B64AA1A265CEB45B562CD5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>release_year</remote-name>
            <remote-type>5</remote-type>
            <local-name>[release_year]</local-name>
            <parent-name>[Netflix_Join]</parent-name>
            <remote-alias>release_year</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Netflix_Join_C163A833D5B64AA1A265CEB45B562CD5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>rating</remote-name>
            <remote-type>130</remote-type>
            <local-name>[rating]</local-name>
            <parent-name>[Netflix_Join]</parent-name>
            <remote-alias>rating</remote-alias>
            <ordinal>7</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>true</contains-null>
            <padded-semantics>true</padded-semantics>
            <collation flag='2147483649' name='LEN_RUS_S2_VWIN' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Netflix_Join_C163A833D5B64AA1A265CEB45B562CD5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>description</remote-name>
            <remote-type>130</remote-type>
            <local-name>[description]</local-name>
            <parent-name>[Netflix_Join]</parent-name>
            <remote-alias>description</remote-alias>
            <ordinal>8</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>true</contains-null>
            <padded-semantics>true</padded-semantics>
            <collation flag='2147483649' name='LEN_RUS_S2_VWIN' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Netflix_Join_C163A833D5B64AA1A265CEB45B562CD5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>show_id</remote-name>
            <remote-type>5</remote-type>
            <local-name>[show_id]</local-name>
            <parent-name>[Netflix_Join]</parent-name>
            <remote-alias>show_id</remote-alias>
            <ordinal>9</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Netflix_Join_C163A833D5B64AA1A265CEB45B562CD5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>cast</remote-name>
            <remote-type>130</remote-type>
            <local-name>[cast]</local-name>
            <parent-name>[Netflix_Join]</parent-name>
            <remote-alias>cast</remote-alias>
            <ordinal>10</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>true</contains-null>
            <padded-semantics>true</padded-semantics>
            <collation flag='2147483649' name='LEN_RUS_S2_VWIN' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Netflix_Join_C163A833D5B64AA1A265CEB45B562CD5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>listed_in</remote-name>
            <remote-type>130</remote-type>
            <local-name>[listed_in]</local-name>
            <parent-name>[Netflix_Join]</parent-name>
            <remote-alias>listed_in</remote-alias>
            <ordinal>11</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>true</contains-null>
            <padded-semantics>true</padded-semantics>
            <collation flag='2147483649' name='LEN_RUS_S2_VWIN' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Netflix_Join_C163A833D5B64AA1A265CEB45B562CD5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[country]</local-name>
            <parent-name>[Netflix_Join]</parent-name>
            <remote-alias>country</remote-alias>
            <ordinal>12</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>true</contains-null>
            <padded-semantics>true</padded-semantics>
            <collation flag='2147483649' name='LEN_RUS_S2_VWIN' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Netflix_Join_C163A833D5B64AA1A265CEB45B562CD5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>director</remote-name>
            <remote-type>130</remote-type>
            <local-name>[director]</local-name>
            <parent-name>[Netflix_Join]</parent-name>
            <remote-alias>director</remote-alias>
            <ordinal>13</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>true</contains-null>
            <padded-semantics>true</padded-semantics>
            <collation flag='2147483649' name='LEN_RUS_S2_VWIN' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Netflix_Join_C163A833D5B64AA1A265CEB45B562CD5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Upper bound' datatype='real' name='[Calculation_695806172862296067]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='WINDOW_AVG(AVG([duration_minutes])) + ([Parameters].[Parameter 1] * WINDOW_STDEV(AVG([duration_minutes])))'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='Growing?' datatype='string' name='[Calculation_695806172949364744]' role='measure' type='nominal'>
        <calculation class='tableau' formula='IF COUNT([title]) &gt;= 0&#13;&#10;THEN &quot;Growing&quot;&#13;&#10;ELSE &quot;Shrinking&quot;&#13;&#10;END' />
      </column>
      <column caption='Lower bound' datatype='real' name='[Upper bound (copy)_695806172865323012]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='WINDOW_AVG(AVG([duration_minutes])) - ([Parameters].[Parameter 1] * WINDOW_STDEV(AVG([duration_minutes])))'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <_.fcp.ObjectModelTableType.true...column caption='Netflix_Join' datatype='table' name='[__tableau_internal_object_id__].[Netflix_Join_C163A833D5B64AA1A265CEB45B562CD5]' role='measure' type='quantitative' />
      <column caption='Cast' datatype='string' name='[cast]' role='dimension' type='nominal' />
      <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column caption='Date Added' datatype='date' datatype-customized='true' name='[date_added]' role='dimension' type='ordinal' />
      <column caption='Description' datatype='string' name='[description]' role='dimension' type='nominal' />
      <column caption='Director' datatype='string' name='[director]' role='dimension' type='nominal' />
      <column caption='Duration Minutes' datatype='real' name='[duration_minutes]' role='measure' type='quantitative' />
      <column caption='Duration Seasons' datatype='real' name='[duration_seasons]' role='measure' type='quantitative' />
      <column datatype='string' name='[listed_in]' role='dimension' type='nominal' />
      <column caption='Rating' datatype='string' name='[rating]' role='dimension' type='nominal' />
      <column aggregation='Count' caption='Release Year' datatype='date' datatype-customized='true' name='[release_year]' role='dimension' type='quantitative' />
      <column caption='Show Id' datatype='real' name='[show_id]' role='dimension' type='ordinal' />
      <column caption='Title' datatype='string' name='[title]' role='dimension' type='nominal' />
      <column caption='Type' datatype='string' name='[type]' role='dimension' type='nominal' />
      <column-instance column='[__tableau_internal_object_id__].[Netflix_Join_C163A833D5B64AA1A265CEB45B562CD5]' derivation='Count' name='[__tableau_internal_object_id__].[cnt:Netflix_Join_C163A833D5B64AA1A265CEB45B562CD5:qk]' pivot='key' type='quantitative' />
      <column-instance column='[country]' derivation='Attribute' name='[attr:country:nk]' pivot='key' type='nominal' />
      <column-instance column='[rating]' derivation='Attribute' name='[attr:rating:nk]' pivot='key' type='nominal' />
      <column-instance column='[duration_minutes]' derivation='Avg' name='[avg:duration_minutes:qk]' pivot='key' type='quantitative' />
      <column-instance column='[duration_minutes]' derivation='Count' name='[cnt:duration_minutes:qk]' pivot='key' type='quantitative' />
      <column-instance column='[country]' derivation='Max' name='[max:country:nk]' pivot='key' type='nominal' />
      <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
      <column-instance column='[listed_in]' derivation='None' name='[none:listed_in:nk]' pivot='key' type='nominal' />
      <column-instance column='[rating]' derivation='None' name='[none:rating:nk]' pivot='key' type='nominal' />
      <column-instance column='[type]' derivation='None' name='[none:type:nk]' pivot='key' type='nominal' />
      <column-instance column='[duration_minutes]' derivation='Stdev' name='[std:duration_minutes:qk]' pivot='key' type='quantitative' />
      <column-instance column='[duration_minutes]' derivation='Sum' name='[sum:duration_minutes:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_695806172949364744]' derivation='User' name='[usr:Calculation_695806172949364744:nk]' pivot='key' type='nominal' />
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[max:country:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>%null%</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Slovakia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Vatican City&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;East Germany&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;South Korea&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Malawi&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Taiwan&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Bermuda&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Soviet Union&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;United States&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Czech Republic&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Venezuela&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Cayman Islands&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Hong Kong&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Senegal&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;United Kingdom&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Cuba&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Iran&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Uruguay&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Liechtenstein&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Nicaragua&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Somalia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Russia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Ghana&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Poland,&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Syria&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Dominican Republic&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;West Germany&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[attr:country:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>%null%</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Slovakia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Vatican City&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;East Germany&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;South Korea&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Malawi&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Taiwan&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Bermuda&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Soviet Union&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;United States&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Czech Republic&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Venezuela&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Cayman Islands&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Hong Kong&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Senegal&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;United Kingdom&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Cuba&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Iran&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Uruguay&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Liechtenstein&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Nicaragua&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Somalia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Russia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Ghana&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Poland,&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Syria&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Dominican Republic&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;West Germany&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:country:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>%null%</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Slovakia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Vatican City&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;East Germany&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;South Korea&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Malawi&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Taiwan&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Bermuda&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Soviet Union&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;United States&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Czech Republic&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Venezuela&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Cayman Islands&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Hong Kong&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Senegal&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;United Kingdom&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Cuba&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Iran&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Uruguay&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Liechtenstein&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Nicaragua&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Somalia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Russia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Ghana&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Poland,&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Syria&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Dominican Republic&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;West Germany&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[attr:rating:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;TV-G&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>%null%</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>%many-values%</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;PG&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;TV-Y7&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;TV-MA&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;PG-13&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;G&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;R&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;TV-Y7-FV&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;UR&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;TV-PG&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;TV-14&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;NC-17&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;TV-Y&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;NR&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0x4gw5i1utavke1fs9znw1b3k38v].[__tableau_internal_object_id__].[cnt:Netflix_Join_C163A833D5B64AA1A265CEB45B562CD5:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0x4gw5i1utavke1fs9znw1b3k38v].[avg:duration_minutes:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0x4gw5i1utavke1fs9znw1b3k38v].[cnt:duration_minutes:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0x4gw5i1utavke1fs9znw1b3k38v].[std:duration_minutes:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0x4gw5i1utavke1fs9znw1b3k38v].[sum:duration_minutes:qk]&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[usr:Calculation_695806172949364744:nk]' type='palette'>
            <map to='#59a14f'>
              <bucket>&quot;Growing&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:listed_in:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Crime TV Shows&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Spanish-Language TV Shows&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>%null%</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Action &amp; Adventure&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;LGBTQ Movies&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;TV Shows&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Children &amp; Family Movies&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Romantic Movies&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Dramas&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Teen TV Shows&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Cult Movies&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Sports Movies&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Classic &amp; Cult TV&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Romantic TV Shows&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Kids&apos; TV&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;TV Mysteries&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Anime Features&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Movies&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;TV Thrillers&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;International Movies&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;TV Dramas&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Classic Movies&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Sci-Fi &amp; Fantasy&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Faith &amp; Spirituality&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Thrillers&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Horror Movies&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;TV Action &amp; Adventure&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;International TV Shows&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;TV Horror&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Korean TV Shows&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;TV Sci-Fi &amp; Fantasy&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Documentaries&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Stand-Up Comedy&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Comedies&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Science &amp; Nature TV&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Anime Series&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Music &amp; Musicals&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Independent Movies&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;TV Comedies&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Docuseries&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Stand-Up Comedy &amp; Talk Shows&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;British TV Shows&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Reality TV&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:type:nk]' type='palette'>
            <map to='#76b7b2'>
              <bucket>&quot;Movie&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;TV Show&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:rating:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;TV-G&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>%null%</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;PG&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;TV-Y7&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;TV-MA&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;PG-13&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;G&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;R&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;TV-Y7-FV&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;UR&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;TV-PG&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;TV-14&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;NC-17&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;TV-Y&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;NR&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States Minor Outlying Islands&quot;' />
      </semantic-values>
      <datasource-dependencies datasource='Parameters'>
        <column caption='Number of SDs' datatype='real' name='[Parameter 1]' param-domain-type='range' role='measure' type='quantitative' value='1.'>
          <calculation class='tableau' formula='1.' />
          <range granularity='1.0' max='3.0' />
        </column>
      </datasource-dependencies>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='Netflix_Join' id='Netflix_Join_C163A833D5B64AA1A265CEB45B562CD5'>
            <properties context=''>
              <relation connection='sqlserver.0nhfhg70bz0awt1b3jiso1jwrp79' name='Netflix_Join' table='[dbo].[Netflix_Join]' type='table' />
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <actions>
    <action caption='Highlight 1 (generated)' name='[Action1_846740F4E3A940ABB2E385E0C201DACA]'>
      <activation auto-clear='true' type='on-select' />
      <source type='sheet' worksheet='Number of Cast' />
      <command command='tsc:brush'>
        <param name='field-captions' value='Type' />
        <param name='target' value='Number of Cast' />
      </command>
    </action>
    <action caption='Highlight 2 (generated)' name='[Action2_1D869834CDD2424C8B25EEC9E7945B15]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='Netflix Chronicles' type='sheet' />
      <command command='tsc:brush'>
        <param name='field-captions' value='Type' />
        <param name='target' value='Netflix Chronicles' />
      </command>
    </action>
  </actions>
  <worksheets>
    <worksheet name='Film Duration'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Film Duration Per Rating Based On Country
</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='ACT_SSIS_1' name='federated.0x4gw5i1utavke1fs9znw1b3k38v' />
            <datasource name='Parameters' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Number of SDs' datatype='real' name='[Parameter 1]' param-domain-type='range' role='measure' type='quantitative' value='1.'>
              <calculation class='tableau' formula='1.' />
              <range granularity='1.0' max='3.0' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.0x4gw5i1utavke1fs9znw1b3k38v'>
            <column caption='Upper bound' datatype='real' name='[Calculation_695806172862296067]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='WINDOW_AVG(AVG([duration_minutes])) + ([Parameters].[Parameter 1] * WINDOW_STDEV(AVG([duration_minutes])))'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <_.fcp.ObjectModelTableType.false...column caption='Netflix_Join' datatype='integer' name='[__tableau_internal_object_id__].[Netflix_Join_C163A833D5B64AA1A265CEB45B562CD5]' role='measure' type='quantitative' />
            <column caption='Lower bound' datatype='real' name='[Upper bound (copy)_695806172865323012]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='WINDOW_AVG(AVG([duration_minutes])) - ([Parameters].[Parameter 1] * WINDOW_STDEV(AVG([duration_minutes])))'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <_.fcp.ObjectModelTableType.true...column caption='Netflix_Join' datatype='table' name='[__tableau_internal_object_id__].[Netflix_Join_C163A833D5B64AA1A265CEB45B562CD5]' role='measure' type='quantitative' />
            <column-instance column='[__tableau_internal_object_id__].[Netflix_Join_C163A833D5B64AA1A265CEB45B562CD5]' derivation='Count' name='[__tableau_internal_object_id__].[cnt:Netflix_Join_C163A833D5B64AA1A265CEB45B562CD5:qk]' pivot='key' type='quantitative' />
            <column-instance column='[duration_minutes]' derivation='Avg' name='[avg:duration_minutes:qk]' pivot='key' type='quantitative' />
            <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column caption='Duration Minutes' datatype='real' name='[duration_minutes]' role='measure' type='quantitative' />
            <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
            <column-instance column='[rating]' derivation='None' name='[none:rating:nk]' pivot='key' type='nominal' />
            <column caption='Rating' datatype='string' name='[rating]' role='dimension' type='nominal' />
            <column-instance column='[Calculation_695806172862296067]' derivation='User' name='[usr:Calculation_695806172862296067:qk:1]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Columns' />
            </column-instance>
            <column-instance column='[Upper bound (copy)_695806172865323012]' derivation='User' name='[usr:Upper bound (copy)_695806172865323012:qk:1]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Columns' />
            </column-instance>
          </datasource-dependencies>
          <filter class='quantitative' column='[federated.0x4gw5i1utavke1fs9znw1b3k38v].[avg:duration_minutes:qk]' included-values='non-null' />
          <filter class='categorical' column='[federated.0x4gw5i1utavke1fs9znw1b3k38v].[none:country:nk]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:country:nk]' />
              <groupfilter function='member' level='[none:country:nk]' member='%null%' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0x4gw5i1utavke1fs9znw1b3k38v].[none:rating:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:rating:nk]' />
              <groupfilter function='member' level='[none:rating:nk]' member='%null%' />
            </groupfilter>
          </filter>
          <computed-sort column='[federated.0x4gw5i1utavke1fs9znw1b3k38v].[none:rating:nk]' direction='DESC' using='[federated.0x4gw5i1utavke1fs9znw1b3k38v].[__tableau_internal_object_id__].[cnt:Netflix_Join_C163A833D5B64AA1A265CEB45B562CD5:qk]' />
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0x4gw5i1utavke1fs9znw1b3k38v].[none:country:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0x4gw5i1utavke1fs9znw1b3k38v].[avg:duration_minutes:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.0x4gw5i1utavke1fs9znw1b3k38v].[avg:duration_minutes:qk]</column>
            <column>[federated.0x4gw5i1utavke1fs9znw1b3k38v].[none:country:nk]</column>
            <column>[federated.0x4gw5i1utavke1fs9znw1b3k38v].[none:rating:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='refband'>
            <format attr='line-visibility' id='refline0' value='on' />
            <format attr='line-pattern-only' id='refline0' value='dashed' />
            <format attr='line-visibility' id='refline2' value='on' />
            <format attr='line-pattern-only' id='refline2' value='dashed' />
            <format attr='fill-color' id='refline0' value='#d4d4d4' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0x4gw5i1utavke1fs9znw1b3k38v].[none:rating:nk]' />
              <lod column='[federated.0x4gw5i1utavke1fs9znw1b3k38v].[usr:Upper bound (copy)_695806172865323012:qk:1]' />
              <lod column='[federated.0x4gw5i1utavke1fs9znw1b3k38v].[usr:Calculation_695806172862296067:qk:1]' />
            </encodings>
            <reference-line axis-column='[federated.0x4gw5i1utavke1fs9znw1b3k38v].[avg:duration_minutes:qk]' enable-instant-analytics='true' formula='min' id='refline0' label-type='automatic' paired-id='refline1' scope='per-table' symmetric='false' value-column='[federated.0x4gw5i1utavke1fs9znw1b3k38v].[avg:duration_minutes:qk]' z-order='1' />
            <reference-line axis-column='[federated.0x4gw5i1utavke1fs9znw1b3k38v].[avg:duration_minutes:qk]' enable-instant-analytics='true' formula='max' id='refline1' label-type='automatic' paired-id='refline0' scope='per-table' symmetric='false' value-column='[federated.0x4gw5i1utavke1fs9znw1b3k38v].[avg:duration_minutes:qk]' z-order='2' />
            <reference-line axis-column='[federated.0x4gw5i1utavke1fs9znw1b3k38v].[avg:duration_minutes:qk]' enable-instant-analytics='true' fill-above='false' fill-below='false' formula='confidence' id='refline4' label-type='none' paired-distribution-id='refline5' probability='95' scope='per-pane' show-lines='both' symmetric='false' value-column='[federated.0x4gw5i1utavke1fs9znw1b3k38v].[avg:duration_minutes:qk]' z-order='3' />
            <reference-line axis-column='[federated.0x4gw5i1utavke1fs9znw1b3k38v].[avg:duration_minutes:qk]' enable-instant-analytics='true' formula='average' id='refline5' label-type='automatic' paired-distribution-id='refline4' probability='95' scope='per-pane' value-column='[federated.0x4gw5i1utavke1fs9znw1b3k38v].[avg:duration_minutes:qk]' z-order='4' />
          </pane>
        </panes>
        <rows>[federated.0x4gw5i1utavke1fs9znw1b3k38v].[none:country:nk]</rows>
        <cols>[federated.0x4gw5i1utavke1fs9znw1b3k38v].[avg:duration_minutes:qk]</cols>
      </table>
      <simple-id uuid='{A1775CAB-6EC6-492F-917F-23201E1A0E43}' />
    </worksheet>
    <worksheet name='Genre'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Number of Movie per Genre In Relation To Rating</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='ACT_SSIS_1' name='federated.0x4gw5i1utavke1fs9znw1b3k38v' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.0x4gw5i1utavke1fs9znw1b3k38v'>
            <column-instance column='[title]' derivation='CountD' name='[ctd:title:qk]' pivot='key' type='quantitative' />
            <column datatype='string' name='[listed_in]' role='dimension' type='nominal' />
            <column-instance column='[listed_in]' derivation='None' name='[none:listed_in:nk]' pivot='key' type='nominal' />
            <column-instance column='[rating]' derivation='None' name='[none:rating:nk]' pivot='key' type='nominal' />
            <column caption='Rating' datatype='string' name='[rating]' role='dimension' type='nominal' />
            <column caption='Title' datatype='string' name='[title]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0x4gw5i1utavke1fs9znw1b3k38v].[none:listed_in:nk]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:listed_in:nk]' />
              <groupfilter function='member' level='[none:listed_in:nk]' member='%null%' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0x4gw5i1utavke1fs9znw1b3k38v].[none:rating:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:rating:nk]' />
              <groupfilter function='member' level='[none:rating:nk]' member='%null%' />
            </groupfilter>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0x4gw5i1utavke1fs9znw1b3k38v].[none:listed_in:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0x4gw5i1utavke1fs9znw1b3k38v].[ctd:title:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.0x4gw5i1utavke1fs9znw1b3k38v].[none:listed_in:nk]</column>
            <column>[federated.0x4gw5i1utavke1fs9znw1b3k38v].[none:rating:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0x4gw5i1utavke1fs9znw1b3k38v].[none:rating:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0x4gw5i1utavke1fs9znw1b3k38v].[none:listed_in:nk]</rows>
        <cols>[federated.0x4gw5i1utavke1fs9znw1b3k38v].[ctd:title:qk]</cols>
      </table>
      <simple-id uuid='{2597CD2A-55DB-4289-B66C-41192B862F8A}' />
    </worksheet>
    <worksheet name='Growth'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Growth of NETFLIX&apos;s Film &amp; TV Show Number Between 2015-2019
</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='ACT_SSIS_1' name='federated.0x4gw5i1utavke1fs9znw1b3k38v' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.0x4gw5i1utavke1fs9znw1b3k38v'>
            <column caption='Date Added' datatype='date' datatype-customized='true' name='[date_added]' role='dimension' type='ordinal' />
            <column-instance column='[rating]' derivation='None' name='[none:rating:nk]' pivot='key' type='nominal' />
            <column-instance column='[type]' derivation='None' name='[none:type:nk]' pivot='key' type='nominal' />
            <column-instance column='[title]' derivation='CountD' name='[pcdf:ctd:title:qk:1]' pivot='key' type='quantitative'>
              <table-calc diff-options='Relative' ordering-type='Field' type='PctDiff'>
                <order field='[federated.0x4gw5i1utavke1fs9znw1b3k38v].[yr:date_added:ok]' />
                <order field='[federated.0x4gw5i1utavke1fs9znw1b3k38v].[qr:date_added:ok]' />
                <address>
                  <value>-1</value>
                </address>
              </table-calc>
            </column-instance>
            <column-instance column='[date_added]' derivation='Quarter' name='[qr:date_added:ok]' pivot='key' type='ordinal' />
            <column caption='Rating' datatype='string' name='[rating]' role='dimension' type='nominal' />
            <column caption='Title' datatype='string' name='[title]' role='dimension' type='nominal' />
            <column caption='Type' datatype='string' name='[type]' role='dimension' type='nominal' />
            <column-instance column='[date_added]' derivation='Year' name='[yr:date_added:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0x4gw5i1utavke1fs9znw1b3k38v].[none:rating:nk]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:rating:nk]' />
              <groupfilter function='member' level='[none:rating:nk]' member='%null%' />
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[federated.0x4gw5i1utavke1fs9znw1b3k38v].[pcdf:ctd:title:qk:1]' included-values='non-null' />
          <filter class='categorical' column='[federated.0x4gw5i1utavke1fs9znw1b3k38v].[yr:date_added:ok]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[yr:date_added:ok]' />
              <groupfilter function='union'>
                <groupfilter function='member' level='[yr:date_added:ok]' member='%null%' />
                <groupfilter from='2008' function='range' level='[yr:date_added:ok]' to='2014' />
                <groupfilter function='member' level='[yr:date_added:ok]' member='2020' />
              </groupfilter>
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0x4gw5i1utavke1fs9znw1b3k38v].[yr:date_added:ok]</column>
            <column>[federated.0x4gw5i1utavke1fs9znw1b3k38v].[none:rating:nk]</column>
            <column>[federated.0x4gw5i1utavke1fs9znw1b3k38v].[pcdf:ctd:title:qk:1]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='worksheet'>
            <format attr='in-tooltip' field='[federated.0x4gw5i1utavke1fs9znw1b3k38v].[yr:date_added:ok]' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#499894' />
                <format attr='line-interpolation' value='linear' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.0x4gw5i1utavke1fs9znw1b3k38v].[none:type:nk] * [federated.0x4gw5i1utavke1fs9znw1b3k38v].[pcdf:ctd:title:qk:1])</rows>
        <cols>([federated.0x4gw5i1utavke1fs9znw1b3k38v].[yr:date_added:ok] / [federated.0x4gw5i1utavke1fs9znw1b3k38v].[qr:date_added:ok])</cols>
      </table>
      <simple-id uuid='{75972BC9-80F3-41CE-9943-5282F21C156B}' />
    </worksheet>
    <worksheet name='Number of Cast'>
      <layout-options>
        <title>
          <formatted-text>
            <run>TOP 10 Country In Terms Of Number Of Cast</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='ACT_SSIS_1' name='federated.0x4gw5i1utavke1fs9znw1b3k38v' />
          </datasources>
          <datasource-dependencies datasource='federated.0x4gw5i1utavke1fs9znw1b3k38v'>
            <column caption='Cast' datatype='string' name='[cast]' role='dimension' type='nominal' />
            <column-instance column='[cast]' derivation='Count' name='[cnt:cast:qk]' pivot='key' type='quantitative' />
            <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[cast]' derivation='None' name='[none:cast:nk]' pivot='key' type='nominal' />
            <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
            <column-instance column='[type]' derivation='None' name='[none:type:nk]' pivot='key' type='nominal' />
            <column caption='Type' datatype='string' name='[type]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0x4gw5i1utavke1fs9znw1b3k38v].[none:cast:nk]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:cast:nk]' />
              <groupfilter function='member' level='[none:cast:nk]' member='%null%' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0x4gw5i1utavke1fs9znw1b3k38v].[none:country:nk]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:country:nk]' />
              <groupfilter function='except'>
                <groupfilter function='level-members' level='[none:country:nk]' />
                <groupfilter function='union'>
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Armenia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Botswana&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Canada&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;France&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Germany&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;India&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Japan&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Kazakhstan&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Mexico&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Mongolia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Namibia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Samoa&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;South Korea&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Spain&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Uganda&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom,&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States,&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Zimbabwe&quot;' />
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </filter>
          <manual-sort column='[federated.0x4gw5i1utavke1fs9znw1b3k38v].[none:country:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;United States&quot;</bucket>
              <bucket>&quot;India&quot;</bucket>
              <bucket>&quot;United Kingdom&quot;</bucket>
              <bucket>&quot;Canada&quot;</bucket>
              <bucket>&quot;France&quot;</bucket>
              <bucket>&quot;Japan&quot;</bucket>
              <bucket>&quot;Spain&quot;</bucket>
              <bucket>&quot;Germany&quot;</bucket>
              <bucket>&quot;South Korea&quot;</bucket>
              <bucket>&quot;Mexico&quot;</bucket>
              <bucket>&quot;China&quot;</bucket>
              <bucket>&quot;Australia&quot;</bucket>
              <bucket>&quot;Hong Kong&quot;</bucket>
              <bucket>&quot;Turkey&quot;</bucket>
              <bucket>&quot;Belgium&quot;</bucket>
              <bucket>&quot;Argentina&quot;</bucket>
              <bucket>&quot;Taiwan&quot;</bucket>
              <bucket>&quot;Egypt&quot;</bucket>
              <bucket>&quot;Brazil&quot;</bucket>
              <bucket>&quot;Italy&quot;</bucket>
              <bucket>&quot;Indonesia&quot;</bucket>
              <bucket>&quot;Thailand&quot;</bucket>
              <bucket>&quot;Philippines&quot;</bucket>
              <bucket>&quot;Nigeria&quot;</bucket>
              <bucket>&quot;Denmark&quot;</bucket>
              <bucket>&quot;Netherlands&quot;</bucket>
              <bucket>&quot;Ireland&quot;</bucket>
              <bucket>&quot;Colombia&quot;</bucket>
              <bucket>&quot;South Africa&quot;</bucket>
              <bucket>&quot;Singapore&quot;</bucket>
              <bucket>&quot;Sweden&quot;</bucket>
              <bucket>&quot;Poland&quot;</bucket>
              <bucket>&quot;Pakistan&quot;</bucket>
              <bucket>&quot;Chile&quot;</bucket>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
              <bucket>&quot;Israel&quot;</bucket>
              <bucket>&quot;Malaysia&quot;</bucket>
              <bucket>&quot;New Zealand&quot;</bucket>
              <bucket>&quot;Norway&quot;</bucket>
              <bucket>&quot;Switzerland&quot;</bucket>
              <bucket>&quot;Russia&quot;</bucket>
              <bucket>&quot;Czech Republic&quot;</bucket>
              <bucket>&quot;Bulgaria&quot;</bucket>
              <bucket>&quot;Austria&quot;</bucket>
              <bucket>&quot;Peru&quot;</bucket>
              <bucket>&quot;Luxembourg&quot;</bucket>
              <bucket>&quot;Lebanon&quot;</bucket>
              <bucket>&quot;Greece&quot;</bucket>
              <bucket>&quot;Romania&quot;</bucket>
              <bucket>&quot;Qatar&quot;</bucket>
              <bucket>&quot;Iceland&quot;</bucket>
              <bucket>&quot;Uruguay&quot;</bucket>
              <bucket>&quot;Serbia&quot;</bucket>
              <bucket>&quot;Morocco&quot;</bucket>
              <bucket>&quot;Finland&quot;</bucket>
              <bucket>&quot;Jordan&quot;</bucket>
              <bucket>&quot;Hungary&quot;</bucket>
              <bucket>&quot;Vietnam&quot;</bucket>
              <bucket>&quot;Portugal&quot;</bucket>
              <bucket>&quot;Iran&quot;</bucket>
              <bucket>&quot;Croatia&quot;</bucket>
              <bucket>&quot;West Germany&quot;</bucket>
              <bucket>&quot;Soviet Union&quot;</bucket>
              <bucket>&quot;Slovenia&quot;</bucket>
              <bucket>&quot;Cambodia&quot;</bucket>
              <bucket>&quot;Bangladesh&quot;</bucket>
              <bucket>&quot;Nepal&quot;</bucket>
              <bucket>&quot;Ghana&quot;</bucket>
              <bucket>&quot;Dominican Republic&quot;</bucket>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
              <bucket>&quot;Malta&quot;</bucket>
              <bucket>&quot;Ukraine&quot;</bucket>
              <bucket>&quot;Venezuela&quot;</bucket>
              <bucket>&quot;Vatican City&quot;</bucket>
              <bucket>&quot;Sudan&quot;</bucket>
              <bucket>&quot;Sri Lanka&quot;</bucket>
              <bucket>&quot;Somalia&quot;</bucket>
              <bucket>&quot;Slovakia&quot;</bucket>
              <bucket>&quot;Senegal&quot;</bucket>
              <bucket>&quot;Poland,&quot;</bucket>
              <bucket>&quot;Paraguay&quot;</bucket>
              <bucket>&quot;Panama&quot;</bucket>
              <bucket>&quot;Nicaragua&quot;</bucket>
              <bucket>&quot;Montenegro&quot;</bucket>
              <bucket>&quot;Malawi&quot;</bucket>
              <bucket>&quot;Liechtenstein&quot;</bucket>
              <bucket>&quot;Latvia&quot;</bucket>
              <bucket>&quot;Kenya&quot;</bucket>
              <bucket>&quot;Iraq&quot;</bucket>
              <bucket>&quot;Guatemala&quot;</bucket>
              <bucket>&quot;Georgia&quot;</bucket>
              <bucket>&quot;Ecuador&quot;</bucket>
              <bucket>&quot;East Germany&quot;</bucket>
              <bucket>&quot;Cayman Islands&quot;</bucket>
              <bucket>&quot;Bermuda&quot;</bucket>
              <bucket>&quot;Albania&quot;</bucket>
              <bucket>&quot;Afghanistan&quot;</bucket>
              <bucket>&quot;Syria&quot;</bucket>
              <bucket>&quot;Mauritius&quot;</bucket>
              <bucket>&quot;Kuwait&quot;</bucket>
              <bucket>&quot;Cyprus&quot;</bucket>
              <bucket>&quot;Cuba&quot;</bucket>
              <bucket>&quot;Azerbaijan&quot;</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </manual-sort>
          <slices>
            <column>[federated.0x4gw5i1utavke1fs9znw1b3k38v].[none:cast:nk]</column>
            <column>[federated.0x4gw5i1utavke1fs9znw1b3k38v].[none:country:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.0x4gw5i1utavke1fs9znw1b3k38v].[cnt:cast:qk]' field-type='quantitative' max='6777' min='252' range-type='fixed' scope='cols' type='space' />
          </style-rule>
          <style-rule element='header'>
            <format attr='height-header' value='21' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0x4gw5i1utavke1fs9znw1b3k38v].[none:type:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#499894' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0x4gw5i1utavke1fs9znw1b3k38v].[none:country:nk]</rows>
        <cols>[federated.0x4gw5i1utavke1fs9znw1b3k38v].[cnt:cast:qk]</cols>
      </table>
      <simple-id uuid='{832DA61D-E88A-4494-A95C-06A663F89818}' />
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard _.fcp.AccessibleZoneTabOrder.true...enable-sort-zone-taborder='true' name='Netflix Chronicles'>
      <style />
      <size maxheight='800' maxwidth='1000' minheight='800' minwidth='1000' />
      <zones>
        <zone h='100000' id='31' type-v2='layout-basic' w='100000' x='0' y='0'>
          <zone h='98000' id='12' type-v2='layout-basic' w='98400' x='800' y='1000'>
            <zone h='92000' id='17' param='horz' type-v2='layout-flow' w='96800' x='1600' y='6000'>
              <zone h='92000' id='15' type-v2='layout-basic' w='80800' x='1600' y='6000'>
                <zone h='42833' id='11' name='Growth' w='40400' x='1600' y='6000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='42833' id='13' name='Number of Cast' w='40400' x='42000' y='6000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='49167' id='14' name='Film Duration' w='40400' x='1600' y='48833'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='49167' id='36' name='Genre' w='40400' x='42000' y='48833'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
              </zone>
              <zone fixed-size='160' h='92000' id='16' is-fixed='true' param='vert' type-v2='layout-flow' w='16000' x='82400' y='6000'>
                <zone alt-text='NETFLIX' h='13625' id='21' is-scaled='1' param='C:/Users/tyogo/Downloads/BrandAssets_Logos_01-Wordmark.jpg' type-v2='bitmap' url='https://www.netflix.com/' w='16000' x='82400' y='6000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone fixed-size='261' h='33625' id='20' is-fixed='true' name='Number of Cast' pane-specification-id='0' param='[federated.0x4gw5i1utavke1fs9znw1b3k38v].[none:type:nk]' type-v2='color' w='16000' x='82400' y='19625'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone fixed-size='350' h='44750' id='19' is-fixed='true' name='Film Duration' pane-specification-id='0' param='[federated.0x4gw5i1utavke1fs9znw1b3k38v].[none:rating:nk]' type-v2='color' w='16000' x='82400' y='53250'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
              </zone>
            </zone>
            <zone forceUpdate='true' h='4000' id='30' type-v2='text' w='96800' x='1600' y='2000'>
              <formatted-text>
                <run bold='true' fontalignment='1' fontcolor='#000000' fontname='Benton Sans Book' fontsize='12'>Netflix Chronicles: The 2015-2019 Surge in Film &amp; TV Show Productions</run>
              </formatted-text>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='4' />
              </zone-style>
            </zone>
            <zone-style>
              <format attr='border-color' value='#000000' />
              <format attr='border-style' value='none' />
              <format attr='border-width' value='0' />
              <format attr='margin' value='8' />
            </zone-style>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='1500' minheight='1500' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='38' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='98000' id='37' param='vert' type-v2='layout-flow' w='98400' x='800' y='1000'>
                <zone forceUpdate='true' h='4000' id='30' type-v2='text' w='96800' x='1600' y='2000'>
                  <formatted-text>
                    <run bold='true' fontalignment='1' fontcolor='#000000' fontname='Benton Sans Book' fontsize='12'>Netflix Chronicles: The 2015-2019 Surge in Film &amp; TV Show Productions</run>
                  </formatted-text>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='42833' id='11' is-fixed='true' name='Growth' w='40400' x='1600' y='6000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='42833' id='13' is-fixed='true' name='Number of Cast' w='40400' x='42000' y='6000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='261' h='33625' id='20' name='Number of Cast' pane-specification-id='0' param='[federated.0x4gw5i1utavke1fs9znw1b3k38v].[none:type:nk]' type-v2='color' w='16000' x='82400' y='19625'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone alt-text='NETFLIX' fixed-size='101' h='13625' id='21' is-fixed='true' is-scaled='1' param='C:/Users/tyogo/Downloads/BrandAssets_Logos_01-Wordmark.jpg' type-v2='bitmap' url='https://www.netflix.com/' w='16000' x='82400' y='6000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='49167' id='14' is-fixed='true' name='Film Duration' w='40400' x='1600' y='48833'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='350' h='44750' id='19' name='Film Duration' pane-specification-id='0' param='[federated.0x4gw5i1utavke1fs9znw1b3k38v].[none:rating:nk]' type-v2='color' w='16000' x='82400' y='53250'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='49167' id='36' is-fixed='true' name='Genre' w='40400' x='42000' y='48833'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{4377CECE-3B73-48B1-A87C-242D8B75C66A}' />
    </dashboard>
  </dashboards>
  <windows source-height='51'>
    <window class='worksheet' name='Growth'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0x4gw5i1utavke1fs9znw1b3k38v].[cnt:type:qk]</field>
            <field>[federated.0x4gw5i1utavke1fs9znw1b3k38v].[none:director:nk]</field>
            <field>[federated.0x4gw5i1utavke1fs9znw1b3k38v].[none:rating:nk]</field>
            <field>[federated.0x4gw5i1utavke1fs9znw1b3k38v].[none:title:nk]</field>
            <field>[federated.0x4gw5i1utavke1fs9znw1b3k38v].[none:type:nk]</field>
            <field>[federated.0x4gw5i1utavke1fs9znw1b3k38v].[qr:date_added:ok]</field>
            <field>[federated.0x4gw5i1utavke1fs9znw1b3k38v].[usr:Calculation_695806172949364744:nk]</field>
            <field>[federated.0x4gw5i1utavke1fs9znw1b3k38v].[yr:date_added:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{6B5FE8CC-0216-4A55-8B60-B99B4EA00A8B}' />
    </window>
    <window class='worksheet' name='Number of Cast'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='bottom'>
          <strip size='2147483647'>
            <card pane-specification-id='0' param='[federated.0x4gw5i1utavke1fs9znw1b3k38v].[none:type:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0x4gw5i1utavke1fs9znw1b3k38v].[ctd:director:qk]</field>
            <field>[federated.0x4gw5i1utavke1fs9znw1b3k38v].[none:Calculation_695806172954607626:qk]</field>
            <field>[federated.0x4gw5i1utavke1fs9znw1b3k38v].[none:Calculation_695806172954644491:qk]</field>
            <field>[federated.0x4gw5i1utavke1fs9znw1b3k38v].[none:Calculation_695806172954660876:qk]</field>
            <field>[federated.0x4gw5i1utavke1fs9znw1b3k38v].[none:Calculation_695806172954673165:qk]</field>
            <field>[federated.0x4gw5i1utavke1fs9znw1b3k38v].[none:cast:nk]</field>
            <field>[federated.0x4gw5i1utavke1fs9znw1b3k38v].[none:country:nk]</field>
            <field>[federated.0x4gw5i1utavke1fs9znw1b3k38v].[none:rating:nk]</field>
            <field>[federated.0x4gw5i1utavke1fs9znw1b3k38v].[none:release_year:qk]</field>
          </color-one-way>
        </highlight>
        <floating-toolbar-visibility value='2' />
      </viewpoint>
      <simple-id uuid='{A104C312-D0F3-4603-8A7F-79ED19414A11}' />
    </window>
    <window class='worksheet' name='Film Duration'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='type_in' param='[Parameters].[Parameter 1]' type='parameter' />
            <card pane-specification-id='0' param='[federated.0x4gw5i1utavke1fs9znw1b3k38v].[none:rating:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0x4gw5i1utavke1fs9znw1b3k38v].[none:rating:nk]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='2' />
      </viewpoint>
      <simple-id uuid='{FF5D8EE8-89FE-4CEB-B470-140ED3901F69}' />
    </window>
    <window class='worksheet' name='Genre'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0x4gw5i1utavke1fs9znw1b3k38v].[none:rating:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0x4gw5i1utavke1fs9znw1b3k38v].[none:listed_in:nk]</field>
            <field>[federated.0x4gw5i1utavke1fs9znw1b3k38v].[none:rating:nk]</field>
            <field>[federated.0x4gw5i1utavke1fs9znw1b3k38v].[none:title:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{004F4C17-05DD-4230-AF2F-974CAC8E2133}' />
    </window>
    <window class='dashboard' maximized='true' name='Netflix Chronicles'>
      <viewpoints>
        <viewpoint name='Film Duration'>
          <zoom type='fit-width' />
          <highlight field='[federated.0x4gw5i1utavke1fs9znw1b3k38v].[none:rating:nk]'>
            <bucket-selection />
          </highlight>
        </viewpoint>
        <viewpoint name='Genre' />
        <viewpoint name='Growth' />
        <viewpoint name='Number of Cast'>
          <highlight field='[federated.0x4gw5i1utavke1fs9znw1b3k38v].[none:type:nk]'>
            <bucket-selection />
          </highlight>
          <floating-toolbar-visibility value='2' />
        </viewpoint>
      </viewpoints>
      <active id='-1' />
      <simple-id uuid='{AEBCBBAA-01EF-42BF-89E3-842B92BFC57D}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Film Duration' width='192'>
      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
      gg==
    </thumbnail>
    <thumbnail height='192' name='Genre' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Growth' width='192'>
      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
      srL+Sb37+f+6hYAHmUx00QAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Netflix Chronicles' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Number of Cast' width='192'>
      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
      r+Sfv2HFUKEAAAAASUVORK5CYII=
    </thumbnail>
  </thumbnails>
</workbook>
